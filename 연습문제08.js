// Q17. 영화 목록을 관리하는 프로그램을 만들어주세요.
//  1) 시청한 영화 목록을 Set 객체로 생성하세요.
//  2) 보고싶은 영화 목록을 Set 객체로 생성하세요.
//  3) 시청한 영화 목록과 보고싶은 영화 목록을 각각 출력하세요.
//  4) “파이트 클럽”이라는 영화를 시청했는지 확인하고 없다면, 시청한 영화에 추가하고, 보고싶은 영화에서 삭제하세요.
//  5) 업데이트된 시청한 영화 목록과 보고싶은 영화 목록을 다시 출력하세요.

// 1) 시청한 영화 목록을 Set 객체로 생성하세요.
const watchedMovies = new Set(["인셉션", "매트릭스", "인터스텔라"]);

// 2) 보고 싶은 영화 목록을 Set 객체로 생성하세요.
const moviesToWatch = new Set(["갓파더", "파이트클럽", "에일리언로물루스"]);

// 3) 시청한 영화 목록과 보고 싶은 영화 목록을 각각 출력하세요.
console.log("시청한 영화 목록:", watchedMovies);
console.log("보고 싶은 영화 목록:", moviesToWatch);

// 4) “파이트클럽”이라는 영화를 시청했는지 확인하고 없다면, 시청한 영화에 추가하고, 보고 싶은 영화에서 삭제하세요.
if (!watchedMovies.has("파이트클럽")) {
  watchedMovies.add("파이트클럽");
  moviesToWatch.delete("파이트클럽");
}

// 5) 업데이트된 시청한 영화 목록과 보고 싶은 영화 목록을 다시 출력하세요.
console.log("업데이트된 시청한 영화 목록:", watchedMovies);
console.log("업데이트된 보고싶은 영화 목록:", moviesToWatch);




// Q18. 책 목록을 관리하는 프로그램을 만들어 주세요.
//  1) 읽은책 목록을 Set 객체로 생성하세요.
//  2) 제목이 7글자 이상인 책을 삭제하세요.
//  3) 친구가 읽은 책목록을 Set 객체로 생성하세요.
//  4) 내가 읽은책 목록과 친구가 읽은책 목록을 각각 출력하세요.
//  5) 나와 친구가 공통으로 읽은책을 찾아서 출력하세요

// 1) 읽은 책 목록을 Set 객체로 생성하세요.
const myBooks = new Set(["해리포터", "호빗", "1984", "전쟁과평화", "위대한갯츠비","칼의노래","청년을위한대한민국은없다"]);

// 2) 제목이 7글자 이상인 책을 삭제하세요.
myBooks.forEach((book) => {
  if (book.length >= 7) {
    myBooks.delete(book);
  }
});

// 3) 친구가 읽은 책 목록을 Set 객체로 생성하세요.
const friendBooks = new Set(["1984", "위대한갯츠비", "해리포터", "모비딕"]);

// 4) 내가 읽은 책 목록과 친구가 읽은 책 목록을 각각 출력하세요.
console.log("내가 읽은 책 목록:", myBooks);
console.log("친구가 읽은 책 목록:", friendBooks);

// 5) 나와 친구가 공통으로 읽은 책을 찾아서 출력하세요.
const commonBooks = new Set([...myBooks].filter((book) => friendBooks.has(book)));
console.log("나와 친구가 공통으로 읽은 책:", commonBooks);






// Q19. 연락처를 관리하는 프로그램을 만들어주세요.
//  1) 연락처 목록을 Map 객체로 생성하세요.
//  2) “동민”의 연락처가 존재하는지 확인하고, 존재한다면 전화번호를 “010-9999-9999”로 수정하세요.
//  3) “지영”의 연락처가존재하는지확인하고, 존재한다면연락처를삭제하세요.
//  4) 현재 연락처 목록을 출력하세요.
//  5) 전체 연락처의 갯수를 출력하세요.

// 1) 연락처 목록을 Map 객체로 생성하세요.
const contacts = new Map([
  ["동민", "010-1234-5678","서울특별시 강남구"],
  ["지영", "010-2345-6789","부산광역시 해운대구"],
  ["철수", "010-3456-7890","대구광역시 수성구"],
  ["수빈", "010-2556-7290","인천광역시 남동구"],
  ["하은", "010-2051-2301","광주광역시 서구"],
  ["민수", "010-2402-5022","대전광역시 유성구"],
]);
//아래 처럼 추가하는게 맞음...
contacts.set("민수",{phone:"010-2020-2020",address:"서울특별시 강남구"})


// 2) “동민”의 연락처가 존재하는지 확인하고, 존재한다면 전화번호를 “010-9999-9999”로 수정하세요.
if (contacts.has("동민")) {
  contacts.set("동민", "010-9999-9999","서울특별시 강남구");
}

// 3) “지영”의 연락처가 존재하는지 확인하고, 존재한다면 연락처를 삭제하세요.
if (contacts.has("지영")) {
  contacts.delete("지영");
}

// 4) 현재 연락처 목록을 출력하세요.
console.log("현재 연락처 목록:");
contacts.forEach((phone, name) => {
  console.log(`${name}: ${phone}`);
});

// 5) 전체 연락처의 갯수를 출력하세요.
console.log("전체 연락처의 갯수:", contacts.size);





// Q20. 학생 정보를 관리하는 프로그램을 만들어 주세요.
//  1) 학생 목록을 Map 객체로 생성하세요.
//  2) 3학년 학생들의 전공을 모두 융합공학으로 변경하세요.
//  3) 이름이 “정예린”인 학생이 있다면, 해당 학생의 정보를 출력하세요.
//  4) 각 학년별로 몇명의 학생이 있는지 계산하고, 출력하세요

// 1) 학생 목록을 Map 객체로 생성하세요.
const students = new Map([
  ["김철수", { grade: 1, major: "컴퓨터공학" }],
  ["박영희", { grade: 2, major: "경영학" }],
  ["이민수", { grade: 3, major: "물리학" }],
  ["정예린", { grade: 3, major: "화학" }],
  ["김둘리", { grade: 2, major: "수학" }],
  ["최민호", { grade: 4, major: "영어영문학" }]
]);

// 2) 3학년 학생들의 전공을 모두 융합공학으로 변경하세요.
students.forEach((info, name) => {
  if (info.grade === 3) {
    info.major = "수학";
  }
});

// 3) 이름이 “정예린”인 학생이 있다면, 해당 학생의 정보를 출력하세요.
if (students.has("정예린")) {
  console.log("정예린 학생의 정보:", students.get("정예린"));
}

// 4) 각 학년별로 몇 명의 학생이 있는지 계산하고, 출력하세요.
const gradeCounts = new Map();

students.forEach((info) => {
  const grade = info.grade;
  gradeCounts.set(grade, (gradeCounts.get(grade) || 0) + 1);
});

console.log("학년별 학생 수:");
gradeCounts.forEach((count, grade) => {
  console.log(`${grade}학년: ${count}명`);
});
